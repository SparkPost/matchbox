@import '../../styles/config';

.Tag {
  display: inline-block;
  white-space: nowrap;
}

.hasRemove {
  .Content {
    border-radius: border-radius(large) 0 0 border-radius(large);
  }
}

.orange {
  .Content {
    background: color(orange, dark);
    color: color(gray, 10);
  }

  .Close, a.Close {
    background: color(orange, dark);
    color: color(gray, 9);

    &:hover, &:active {
      color: color(gray, 10);
      background: darken(color(orange, dark), 5);
    }
  }
}

.blue {
  .Content {
    background: color(blue, dark);
    color: color(gray, 10);
  }

  .Close, a.Close {
    background: color(blue, dark);
    color: color(gray, 9);

    &:hover, &:active {
      color: color(gray, 10);
      background: darken(color(blue, dark), 5);
    }
  }
}

.yellow {
  .Content {
    background: color(yellow, light);
    color: color(gray, 1);
  }

  .Close, a.Close {
    background: color(yellow, light);
    color: color(gray, 1);

    &:hover, &:active {
      color: color(gray, 0);
      background: darken(color(yellow, light), 5);
    }
  }
}

.red {
  .Content {
    background: color(red);
    color: color(gray, 10);
  }

  .Close, a.Close {
    background: color(red);
    color: color(gray, 9);

    &:hover, &:active {
      color: color(gray, 10);
      background: color(red, dark);
    }
  }
}

.navy {
  .Content {
    background: color(navy);
    color: color(gray, 10);
  }

  .Close, a.Close {
    background: color(navy);
    color: color(gray, 9);

    &:hover, &:active {
      color: color(gray, 10);
      background: color(navy, dark);
    }
  }
}

.purple {
  .Content {
    background: color(purple);
    color: color(gray, 10);
  }

  .Close, a.Close {
    background: color(purple);
    color: color(gray, 9);

    &:hover, &:active {
      color: color(gray, 10);
      background: color(purple, dark);
    }
  }
}

.Content {
  display: inline-flex;
  align-items: center;
  padding: rem(1) rem(7) rem(1);
  border-radius: border-radius(large);
  background: color(gray, 8);

  font-size: font-size(300);
  line-height: rem(22);

  // This margin is a little funky, however, appears to be the best route to take to add
  // spacing between icons and other tag content. Ideally, if Tag instances do not have bare
  // strings inside, then the sibling combinator could be used (i.e., `> * + svg { margin-left: 2px; }`),
  // however, that's not possible as bare strings do not count as sibling elements.
  > svg {
    margin: 0 2px;
  }
}

.Close, a.Close {
  display: inline-block;
  padding: 0 rem(6);
  border-radius: 0 border-radius(large) border-radius(large) 0;
  background: color(gray, 8);
  color: color(gray, 4);
  line-height: rem(24);
  transition: 0.15s;
  transition: color 0.15s ease-in-out,
              background 0.15s ease-in-out;

  &:hover,
  &:active {
    color: color(gray, 1);
    background: color(gray, 7);
  }

  & > * {
    margin-top: -0.2em;
  }
}
